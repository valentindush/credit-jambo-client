// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  CREDIT_DISBURSEMENT
  CREDIT_REPAYMENT
  FEE
  REVERSAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum CreditStatus {
  PENDING
  APPROVED
  REJECTED
  DISBURSED
  ACTIVE
  COMPLETED
  DEFAULTED
}

enum NotificationType {
  EMAIL
  IN_APP
  SMS
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  READ
}

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  password          String
  firstName         String
  lastName          String
  phoneNumber       String?     @unique
  dateOfBirth       DateTime?
  address           String?
  city              String?
  country           String?
  role              UserRole    @default(CUSTOMER)
  status            UserStatus  @default(PENDING_VERIFICATION)
  emailVerified     Boolean     @default(false)
  phoneVerified     Boolean     @default(false)
  kycVerified       Boolean     @default(false)
  profilePicture    String?
  lastLoginAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  savings           Savings[]
  credits           Credit[]
  transactions      Transaction[]
  notifications     Notification[]
  devices           Device[]
  refreshTokens     RefreshToken[]

  @@index([email])
  @@index([phoneNumber])
  @@map("users")
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      String
  deviceId    String?
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  revokedAt   DateTime?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  device      Device?  @relation(fields: [deviceId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}

model Device {
  id              String    @id @default(uuid())
  userId          String
  deviceName      String
  deviceType      String?
  deviceId        String    @unique
  ipAddress       String?
  userAgent       String?
  isActive        Boolean   @default(true)
  lastUsedAt      DateTime  @default(now())
  createdAt       DateTime  @default(now())
  
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshTokens   RefreshToken[]

  @@index([userId])
  @@index([deviceId])
  @@map("devices")
}

model Savings {
  id                String      @id @default(uuid())
  userId            String
  accountNumber     String      @unique
  balance           Decimal     @default(0) @db.Decimal(15, 2)
  currency          String      @default("USD")
  interestRate      Decimal     @default(0) @db.Decimal(5, 2)
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]

  @@index([userId])
  @@index([accountNumber])
  @@map("savings")
}

model Credit {
  id                  String        @id @default(uuid())
  userId              String
  amount              Decimal       @db.Decimal(15, 2)
  interestRate        Decimal       @db.Decimal(5, 2)
  tenure              Int           // in months
  monthlyPayment      Decimal       @db.Decimal(15, 2)
  totalRepayable      Decimal       @db.Decimal(15, 2)
  amountPaid          Decimal       @default(0) @db.Decimal(15, 2)
  outstandingBalance  Decimal       @db.Decimal(15, 2)
  status              CreditStatus  @default(PENDING)
  purpose             String?
  creditScore         Int?          // Mock credit score
  approvedBy          String?
  approvedAt          DateTime?
  disbursedAt         DateTime?
  dueDate             DateTime?
  nextPaymentDate     DateTime?
  rejectionReason     String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions        Transaction[]
  repayments          CreditRepayment[]

  @@index([userId])
  @@index([status])
  @@map("credits")
}

model CreditRepayment {
  id              String              @id @default(uuid())
  creditId        String
  amount          Decimal             @db.Decimal(15, 2)
  paymentDate     DateTime            @default(now())
  transactionId   String?             @unique
  createdAt       DateTime            @default(now())

  credit          Credit              @relation(fields: [creditId], references: [id], onDelete: Cascade)
  transaction     Transaction?        @relation(fields: [transactionId], references: [id])

  @@index([creditId])
  @@map("credit_repayments")
}

model Transaction {
  id                String              @id @default(uuid())
  userId            String
  savingsId         String?
  creditId          String?
  type              TransactionType
  amount            Decimal             @db.Decimal(15, 2)
  balanceBefore     Decimal?            @db.Decimal(15, 2)
  balanceAfter      Decimal?            @db.Decimal(15, 2)
  status            TransactionStatus   @default(PENDING)
  description       String?
  reference         String              @unique
  metadata          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  savings           Savings?            @relation(fields: [savingsId], references: [id], onDelete: SetNull)
  credit            Credit?             @relation(fields: [creditId], references: [id], onDelete: SetNull)
  repayment         CreditRepayment?

  @@index([userId])
  @@index([savingsId])
  @@index([creditId])
  @@index([reference])
  @@index([createdAt])
  @@map("transactions")
}

model Notification {
  id          String              @id @default(uuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  status      NotificationStatus  @default(PENDING)
  metadata    Json?
  readAt      DateTime?
  sentAt      DateTime?
  createdAt   DateTime            @default(now())

  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("notifications")
}

